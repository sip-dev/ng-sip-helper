{
    "prefix": "app",
    "commands": [
        {
            "builtin": false,
            "command": "npm run start %params%",
            "input": false,
            "path": "%workspaceRoot%",
            "terminal": "serve-ngsiphelper",
            "title": "Serve >",
            "params": [
                {
                    "input": false,
                    "param": "-- -e=dev",
                    "terminal": "",
                    "title": "Dev"
                },
                {
                    "param": "-- -e=dev -pc=\"proxy.conf.js\"",
                    "title": "Dev Proxy"
                },
                {
                    "param": "-- --hmr -e=hmr",
                    "title": "HMR"
                },
                {
                    "param": "-- --hmr -e=hmr -pc=\"proxy.conf.js\"",
                    "title": "HMR Proxy"
                },
                {
                    "param": "-- --prod -e=prod -pc=\"proxy.conf.js\"",
                    "title": "PROD Proxy"
                }
            ]
        },
        {
            "command": "npm run build %params%",
            "input": false,
            "path": "%workspaceRoot%",
            "terminal": "build-ngsiphelper",
            "title": "Build >",
            "params": [
                {
                    "param": "",
                    "title": "Build"
                },
                {
                    "param": "-- -prod -e=prod --build-optimizer",
                    "title": "Build PROD"
                }
            ]
        },
        {
            "builtin": true,
            "command": "sip-generate",
            "title": "Generate >"
        },
        {
            "command": "",
            "title": "注册 Modlue >",
            "children": [
                {
                    "builtin": true,
                    "command": "sip-regmodlue",
                    "input": false,
                    "params": [
                        {
                            "param": "--module",
                            "title": "Module"
                        }
                    ],
                    "path": "%currentPath%",
                    "title": "Module >"
                },
                {
                    "builtin": true,
                    "command": "sip-regmodlue",
                    "input": false,
                    "params": [
                        {
                            "param": "--routing",
                            "title": "Routing"
                        }
                    ],
                    "path": "%currentPath%",
                    "title": "Routing >"
                },
                {
                    "builtin": true,
                    "command": "sip-regmodlue",
                    "input": false,
                    "params": [
                        {
                            "param": "--both",
                            "title": "Module And Routing"
                        }
                    ],
                    "path": "%currentPath%",
                    "title": "Module And Routing >"
                },
                {
                    "builtin": true,
                    "command": "sip-regmodlue",
                    "input": false,
                    "params": [
                        {
                            "param": "--cleanmodule",
                            "title": "Module"
                        }
                    ],
                    "path": "%currentPath%",
                    "title": "撤消 Module >"
                },
                {
                    "builtin": true,
                    "command": "sip-regmodlue",
                    "input": false,
                    "params": [
                        {
                            "param": "--cleanrouting",
                            "title": "Routing"
                        }
                    ],
                    "path": "%currentPath%",
                    "title": "撤消 Routing >"
                },
                {
                    "builtin": true,
                    "command": "sip-regmodlue",
                    "input": false,
                    "params": [
                        {
                            "param": "--cleanboth",
                            "title": "Module And Routing"
                        }
                    ],
                    "path": "%currentPath%",
                    "title": "撤消 Module And Routing >"
                }
            ]
        },
        {
            "builtin": true,
            "command": "npm",
            "title": "Npm >"
        },
        {
            "command": "",
            "title": "Other >",
            "children": [
                {
                    "builtin": true,
                    "command": "json-class",
                    "title": "JSON To Class"
                },
                {
                    "builtin": true,
                    "command": "snippet-text",
                    "title": "To Snippet Text"
                },
                {
                    "builtin": true,
                    "command": "region",
                    "title": "Region Block"
                }
            ]
        },
        {
            "builtin": true,
            "command": "config",
            "title": "设 置 >"
        }
    ],
    "templates": [
        {
            "active": true,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "<p>\n  aaaa works!\n</p>\n",
                    "importToModue": "",
                    "input": "demo",
                    "path": "@{input}",
                    "specContent": "import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  let component: @{className};\n  let fixture: ComponentFixture<@{className}>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ @{className}]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AaaaComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: '@{prefix}-@{input}',\n  templateUrl: './@{fileName}.html',\n  styleUrls: ['./@{fileName}.@{styleType}']\n})\nexport class @{className} implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
                    "type": "component",
                    "typeInfo": {
                        "html": true,
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleDeclaration": true,
                        "spec": true,
                        "style": true,
                        "styleType": "less",
                        "ts": true
                    }
                }
            ],
            "title": "component"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "",
                    "specContent": "import { TestBed, inject } from '@angular/core/testing';\n\nimport { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [@{className}]\n    });\n  });\n\n  it('should be created', inject([@{className}], (service: @{className}) => {\n    expect(service).toBeTruthy();\n  }));\n});",
                    "styleContent": "",
                    "tsContent": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class @{className} {\n\n  constructor() { }\n}\n",
                    "type": "service",
                    "typeInfo": {
                        "importToModue": true,
                        "moduleProvider": true,
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "service"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "@{input}",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  let testModule: @{className};\n\n  beforeEach(() => {\n    testModule = new @{className}();\n  });\n\n  it('should create an instance', () => {\n    expect(testModule).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class @{className} { }\n",
                    "type": "module",
                    "typeInfo": {
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleImport": true,
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "module"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}-routing.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "@{input}",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  let testRoutingModule: @{className};\n\n  beforeEach(() => {\n    testRoutingModule = new @{className}();\n  });\n\n  it('should create an instance', () => {\n    expect(testRoutingModule).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class @{className} { }\n",
                    "type": "module",
                    "typeInfo": {
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleImport": true,
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "routing"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "@{input}",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  let testModule: @{className};\n\n  beforeEach(() => {\n    testModule = new @{className}();\n  });\n\n  it('should create an instance', () => {\n    expect(testModule).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { @{#input}RoutingModule } from './@{input}-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    @{#input}RoutingModule\n  ],\n  declarations: []\n})\nexport class @{className} { }\n",
                    "type": "module",
                    "typeInfo": {
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleImport": true,
                        "spec": true,
                        "ts": true
                    }
                },
                {
                    "active": false,
                    "className": "@{#fileName}",
                    "fileName": "@{input}-routing.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "@{input}",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  let testRoutingModule: @{className};\n\n  beforeEach(() => {\n    testRoutingModule = new @{className}();\n  });\n\n  it('should create an instance', () => {\n    expect(testRoutingModule).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class @{className} { }\n",
                    "type": "module",
                    "typeInfo": {
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleImport": true,
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "module & routing"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  it('should create an instance', () => {\n    const directive = new @{className}();\n    expect(directive).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "@Directive({\n  selector: '[@{prefix}@{#input}]'\n})\nexport class @{className} {\n\n  constructor() { }\n\n}\n",
                    "type": "directive",
                    "typeInfo": {
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleDeclaration": true,
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "directive"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  it('create an instance', () => {\n    const pipe = new @{className}();\n    expect(pipe).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: '@{input}'\n})\nexport class @{className} implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return null;\n  }\n\n}\n",
                    "type": "pipe",
                    "typeInfo": {
                        "importToModue": true,
                        "importToRouting": true,
                        "moduleDeclaration": true,
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "pipe"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "",
                    "specContent": "import { TestBed, async, inject } from '@angular/core/testing';\n\nimport { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [@{className}]\n    });\n  });\n\n  it('should ...', inject([@{className}], (guard: @{className}) => {\n    expect(guard).toBeTruthy();\n  }));\n});\n",
                    "styleContent": "",
                    "tsContent": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class @{className} implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n}\n",
                    "type": "guard",
                    "typeInfo": {
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "guard"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "",
                    "specContent": "",
                    "styleContent": "",
                    "tsContent": "export interface @{className} {\n}\n\n",
                    "type": "interface",
                    "typeInfo": {
                        "importToModue": true,
                        "moduleProvider": true,
                        "ts": true
                    }
                }
            ],
            "title": "interface"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}.@{type}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "list",
                    "path": "",
                    "specContent": "import { @{className} } from './@{fileName}';\n\ndescribe('@{className}', () => {\n  it('should create an instance', () => {\n    expect(new @{className}()).toBeTruthy();\n  });\n});\n",
                    "styleContent": "",
                    "tsContent": "export class @{className} {\n}\n",
                    "type": "class",
                    "typeInfo": {
                        "spec": true,
                        "ts": true
                    }
                }
            ],
            "title": "class"
        },
        {
            "active": false,
            "files": [
                {
                    "active": true,
                    "className": "@{#fileName}",
                    "fileName": "@{input}",
                    "htmlContent": "",
                    "importToModue": "",
                    "input": "demo",
                    "path": "",
                    "specContent": "",
                    "styleContent": "",
                    "tsContent": "export enum @{className} {\n}\n",
                    "type": "enum",
                    "typeInfo": {
                        "ts": true
                    }
                }
            ],
            "title": "enum"
        }
    ]
}